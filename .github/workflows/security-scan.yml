name: Security Scan

on:
  schedule:
    - cron: '0 0 * * 0'  # Run weekly on Sunday at midnight
  push:
    branches: [main, develop]
    paths:
      - 'src/backend/**'
      - '.github/workflows/security-scan.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'src/backend/**'
  workflow_dispatch:  # Allow manual triggering

jobs:
  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v3  # actions/checkout v3

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2  # github/codeql-action v2
        with:
          languages: python
          queries: security-extended,security-and-quality

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2  # github/codeql-action v2

  bandit-scan:
    name: Bandit Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3  # actions/checkout v3

      - name: Set up Python
        uses: actions/setup-python@v4  # actions/setup-python v4
        with:
          python-version: '3.10'

      - name: Install Poetry
        run: curl -sSL https://install.python-poetry.org | python3 -

      - name: Add Poetry to PATH
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: cd src/backend && poetry install --with dev

      - name: Run Bandit security scan
        run: cd src/backend && poetry run bandit -r app -f sarif -o bandit-results.sarif

      - name: Upload Bandit results
        uses: github/codeql-action/upload-sarif@v2  # github/codeql-action v2
        with:
          sarif_file: src/backend/bandit-results.sarif
          category: bandit

  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3  # actions/checkout v3

      - name: Set up Python
        uses: actions/setup-python@v4  # actions/setup-python v4
        with:
          python-version: '3.10'

      - name: Install Poetry
        run: curl -sSL https://install.python-poetry.org | python3 -

      - name: Add Poetry to PATH
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: cd src/backend && poetry install --with dev

      - name: Check dependencies for vulnerabilities
        id: safety-check
        run: |
          cd src/backend && poetry export -f requirements.txt | poetry run pip install safety && poetry run safety check --full-report -r /dev/stdin --json > safety-results.json || echo "::set-output name=has_vulnerabilities::true"

      - name: Upload safety results
        if: steps.safety-check.outputs.has_vulnerabilities == 'true'
        uses: actions/upload-artifact@v3
        with:
          name: safety-results
          path: src/backend/safety-results.json

      - name: Create issue for vulnerabilities
        if: steps.safety-check.outputs.has_vulnerabilities == 'true' && github.event_name == 'schedule'
        uses: peter-evans/create-issue-from-file@v4
        with:
          title: Security vulnerabilities found in dependencies
          content-filepath: src/backend/safety-results.json
          labels: security,dependencies

  container-scan:
    name: Container Image Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3  # actions/checkout v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2  # docker/setup-buildx-action v2

      - name: Build Docker image
        uses: docker/build-push-action@v4  # docker/build-push-action v4
        with:
          context: src/backend
          push: false
          tags: document-management-backend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          load: true

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master  # aquasecurity/trivy-action master
        with:
          image-ref: document-management-backend:${{ github.sha }}
          format: sarif
          output: trivy-results.sarif
          severity: CRITICAL,HIGH
          ignore-unfixed: true

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2  # github/codeql-action v2
        with:
          sarif_file: trivy-results.sarif
          category: trivy

  secret-scan:
    name: Secret Detection
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3  # actions/checkout v3
        with:
          fetch-depth: 0

      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2  # gitleaks/gitleaks-action v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

  security-report:
    name: Security Report Generation
    runs-on: ubuntu-latest
    needs: [codeql-analysis, bandit-scan, dependency-scan, container-scan, secret-scan]
    if: always() && github.event_name == 'schedule'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3  # actions/checkout v3

      - name: Set up Python
        uses: actions/setup-python@v4  # actions/setup-python v4
        with:
          python-version: '3.10'

      - name: Download safety results
        uses: actions/download-artifact@v3
        with:
          name: safety-results
          path: security-results
        continue-on-error: true

      - name: Generate security report
        run: python scripts/generate_security_report.py --output security-report.md

      - name: Upload security report
        uses: actions/upload-artifact@v3
        with:
          name: security-report
          path: security-report.md

      - name: Notify security team
        uses: slackapi/slack-github-action@v1.23.0  # slackapi/slack-github-action v1.23.0
        with:
          channel-id: ${{ secrets.SECURITY_SLACK_CHANNEL_ID }}
          slack-message: 'Weekly security scan completed for ${{ github.repository }}. Results available in the security report.'
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}