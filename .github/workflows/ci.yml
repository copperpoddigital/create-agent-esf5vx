name: Continuous Integration

on:
  push:
    branches: [main, develop]
    paths:
      - 'src/backend/**'
      - '.github/workflows/ci.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'src/backend/**'
  workflow_dispatch:

jobs:
  code-quality:
    # Run code quality checks including linting and formatting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Poetry
        run: curl -sSL https://install.python-poetry.org | python3 -

      - name: Add Poetry to PATH
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: cd src/backend && poetry install --with dev

      - name: Check code formatting
        run: cd src/backend && poetry run black --check app tests

      - name: Run linting
        run: cd src/backend && poetry run flake8 app tests

      - name: Check import sorting
        run: cd src/backend && poetry run isort --check-only app tests

      - name: Run type checking
        run: cd src/backend && poetry run mypy app

  unit-tests:
    # Run unit tests with coverage reporting
    runs-on: ubuntu-latest
    needs: [code-quality]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Poetry
        run: curl -sSL https://install.python-poetry.org | python3 -

      - name: Add Poetry to PATH
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: cd src/backend && poetry install --with dev

      - name: Run unit tests with coverage
        run: cd src/backend && poetry run pytest tests/unit --cov=app --cov-report=xml --cov-report=term-missing --cov-fail-under=80

      - name: Upload coverage report
        uses: codecov/codecov-action@v3
        with:
          file: src/backend/coverage.xml
          fail_ci_if_error: true

  integration-tests:
    # Run integration tests
    runs-on: ubuntu-latest
    needs: [unit-tests]
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Poetry
        run: curl -sSL https://install.python-poetry.org | python3 -

      - name: Add Poetry to PATH
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: cd src/backend && poetry install --with dev

      - name: Run integration tests
        run: cd src/backend && poetry run pytest tests/integration -v
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          TESTING: 'True'

  security-scan:
    # Run security scans on code and dependencies
    runs-on: ubuntu-latest
    needs: [code-quality]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Poetry
        run: curl -sSL https://install.python-poetry.org | python3 -

      - name: Add Poetry to PATH
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: cd src/backend && poetry install --with dev

      - name: Run Bandit security scan
        run: cd src/backend && poetry run bandit -r app -f sarif -o bandit-results.sarif

      - name: Upload Bandit results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: src/backend/bandit-results.sarif
          category: bandit

      - name: Check dependencies for vulnerabilities
        run: cd src/backend && poetry export -f requirements.txt | poetry run pip install safety && poetry run safety check --full-report -r /dev/stdin

  build-docker:
    # Build Docker image to verify build process
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, security-scan]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        uses: docker/build-push-action@v4
        with:
          context: src/backend
          push: false
          tags: document-management-backend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: document-management-backend:${{ github.sha }}
          format: table
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'

  notify:
    # Notify team of build status
    runs-on: ubuntu-latest
    needs: [build-docker]
    if: always()
    steps:
      - name: Check build status
        id: check
        run: |
          if [[ "${{ needs.build-docker.result }}" == "success" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
          fi

      - name: Notify team on Slack
        uses: slackapi/slack-github-action@v1.23.0
        with:
          channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
          slack-message: "CI Pipeline for ${{ github.repository }} ${{ steps.check.outputs.status }} on ${{ github.ref_name }} branch."
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}