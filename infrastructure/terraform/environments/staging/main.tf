# Terraform configuration for the Document Management and AI Chatbot System - Staging Environment
# This file defines the infrastructure provisioning for the staging environment,
# which serves as a pre-production validation environment.

# Configure Terraform backend for state management
terraform {
  backend "s3" {
    bucket         = "doc-ai-chatbot-terraform-state-staging"
    key            = "staging/terraform.tfstate"
    region         = "us-west-2"
    encrypt        = true
    dynamodb_table = "doc-ai-chatbot-terraform-locks-staging"
  }

  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 4.0"
    }
    random = {
      source  = "hashicorp/random"
      version = "~> 3.0"
    }
  }
}

# Configure the AWS provider for the staging environment
provider "aws" {
  region  = "us-west-2"
  profile = "staging"
}

# Configure the random provider
provider "random" {
}

# Local values used across the configuration
locals {
  environment_tags = {
    Environment = "staging"
    Project     = "doc-ai-chatbot"
    ManagedBy   = "Terraform"
  }
}

# Call the main module with staging-specific variables
module "main" {
  source = "../.."

  # Project information
  project_name = "doc-ai-chatbot"
  environment  = "staging"
  
  # AWS configuration
  aws_region   = "us-west-2"
  aws_profile  = "staging"
  
  # Terraform state management
  terraform_state_bucket = "doc-ai-chatbot-terraform-state-staging"
  terraform_lock_table   = "doc-ai-chatbot-terraform-locks-staging"
  
  # Network configuration
  vpc_cidr             = "10.0.0.0/16"
  availability_zones   = ["us-west-2a", "us-west-2b", "us-west-2c"]
  public_subnet_cidrs  = ["10.0.1.0/24", "10.0.2.0/24", "10.0.3.0/24"]
  private_subnet_cidrs = ["10.0.4.0/24", "10.0.5.0/24", "10.0.6.0/24"]
  database_subnet_cidrs = ["10.0.7.0/24", "10.0.8.0/24", "10.0.9.0/24"]
  
  # SSL certificate
  certificate_arn = "arn:aws:acm:us-west-2:123456789012:certificate/abcd1234-ef56-gh78-ij90-klmnopqrstuv"
  
  # S3 bucket configuration
  document_bucket_name = "doc-ai-chatbot-documents-staging"
  log_bucket_name      = "doc-ai-chatbot-logs-staging"
  force_destroy_buckets = true
  enable_versioning     = true
  standard_ia_transition_days = 90
  log_expiration_days   = 90
  
  # Database configuration
  db_instance_class    = "db.t3.medium"
  db_name              = "docaichatbot"
  db_username          = "dbadmin"
  db_password          = null  # Will be generated by the module if not provided
  db_allocated_storage = 50
  db_multi_az          = true
  
  # ECS configuration
  ecs_task_execution_role_arn = null  # Will be created by the module if not provided
  ecs_task_role_arn           = null  # Will be created by the module if not provided
  container_image             = "doc-ai-chatbot:staging"
  container_port              = 8000
  container_cpu               = 1024
  container_memory            = 2048
  desired_count               = 2
  min_capacity                = 2
  max_capacity                = 6
  
  # Security configuration
  enable_waf = true
  
  # Application configuration
  openai_api_key = null  # Will be injected through AWS Secrets Manager
  
  # Monitoring configuration
  alarm_email = "staging-alerts@example.com"
}

# Output values from the infrastructure deployment
output "vpc_id" {
  description = "ID of the VPC"
  value       = module.vpc.vpc_id
}

output "alb_dns_name" {
  description = "DNS name of the Application Load Balancer"
  value       = module.alb.alb_dns_name
}

output "document_bucket_name" {
  description = "Name of the S3 bucket for document storage"
  value       = module.s3.document_bucket_name
}

output "db_endpoint" {
  description = "Endpoint of the RDS database"
  value       = module.rds.db_endpoint
}

output "ecs_cluster_name" {
  description = "Name of the ECS cluster"
  value       = module.ecs.cluster_name
}

output "app_url" {
  description = "URL for accessing the application"
  value       = "https://${module.alb.alb_dns_name}"
}